{"ast":null,"code":"/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst ErrorCodes = require('./utils/SDKErrors').codes;\nconst {\n  AEM_GRAPHQL_ACTIONS,\n  AEM_GRAPHQL_TYPES\n} = require('./utils/config');\nconst {\n  graphQLQueryBuilder,\n  getQueryType\n} = require('./utils/GraphQLQueryBuilder');\nconst {\n  __getUrl,\n  __getPath,\n  __getDomain,\n  __validateUrl,\n  __getFetch,\n  __getAuthHeader\n} = require('./utils/utils');\nconst {\n  REQUEST_ERROR,\n  RESPONSE_ERROR,\n  API_ERROR,\n  INVALID_PARAM\n} = ErrorCodes;\n\n/**\n * This class provides methods to call AEM GraphQL APIs.\n * Before calling any method initialize the instance\n * with GraphQL endpoint, GraphQL serviceURL and auth if needed\n */\nclass AEMHeadless {\n  /**\n   * Constructor.\n   *\n   * If param is a string, it's treated as AEM server URL, default GraphQL endpoint is used.\n   * For granular params, use config object\n   *\n   * @param {string|object} config - Configuration object, or AEM server URL string\n   * @param {string} [config.serviceURL] - AEM server URL\n   * @param {string} [config.endpoint] - GraphQL endpoint\n   * @param {(string|Array)} [config.auth] - Bearer token string or [user,pass] pair array\n   * @param {object} [config.headers] - header { name: value, name: value, ... }\n   * @param {object} [config.fetch] - custom Fetch instance\n   */\n  constructor(config) {\n    let endpoint = AEM_GRAPHQL_ACTIONS.endpoint;\n    let serviceURL = AEM_GRAPHQL_ACTIONS.serviceURL;\n    if (typeof config === 'string') {\n      serviceURL = config;\n    } else {\n      serviceURL = config.serviceURL || serviceURL;\n      endpoint = config.endpoint || endpoint;\n      this.auth = config.auth;\n      this.headers = config.headers;\n    }\n    this.serviceURL = __getDomain(serviceURL);\n    this.endpoint = __getPath(endpoint);\n    this.fetch = __getFetch(config.fetch);\n  }\n\n  /**\n   * Returns a Promise that resolves with a POST request JSON data.\n   *\n   * @param {string|object} body - the query string or an object with query (and optionally variables) as a property\n   * @param {object} [options={}] - additional POST request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n  async runQuery(body, options = {}, retryOptions = {}) {\n    const postBody = typeof body === 'object' ? body : {\n      query: body\n    };\n    return this.__handleRequest(this.endpoint, JSON.stringify(postBody), options, retryOptions);\n  }\n\n  /**\n   * Returns a Promise that resolves with a PUT request JSON data.\n   *\n   * @param {string} query - the query string\n   * @param {string} path - AEM path to save query, format: configuration_name/endpoint_name\n   * @param {object} [options={}] - additional PUT request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n  async persistQuery(query, path, options = {}, retryOptions = {}) {\n    const url = `${AEM_GRAPHQL_ACTIONS.persist}/${path}`;\n    return this.__handleRequest(url, query, {\n      method: 'PUT',\n      ...options\n    }, retryOptions);\n  }\n\n  /**\n   * Returns a Promise that resolves with a GET request JSON data.\n   *\n   * @param {object} [options={}] - additional GET request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n  async listPersistedQueries(options = {}, retryOptions = {}) {\n    const url = `${AEM_GRAPHQL_ACTIONS.list}`;\n    return this.__handleRequest(url, '', {\n      method: 'GET',\n      ...options\n    }, retryOptions);\n  }\n\n  /**\n   * Returns a Promise that resolves with a GET request JSON data.\n   *\n   * @param {string} path - AEM path for persisted query, format: configuration_name/endpoint_name\n   * @param {object} [variables={}] - query variables\n   * @param {object} [options={}] - additional GET request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n\n  async runPersistedQuery(path, variables = {}, options = {}, retryOptions = {}) {\n    const method = (options.method || 'GET').toUpperCase();\n    let body = '';\n    let variablesString = encodeURIComponent(Object.keys(variables).map(key => {\n      const val = typeof variables[key] === 'string' ? variables[key] : JSON.stringify(variables[key]);\n      return `;${key}=${val}`;\n    }).join(''));\n    if (method === 'POST') {\n      body = JSON.stringify({\n        variables\n      });\n      variablesString = '';\n    }\n    const url = `${AEM_GRAPHQL_ACTIONS.execute}/${path}${variablesString}`;\n    return this.__handleRequest(url, body, {\n      method,\n      ...options\n    }, retryOptions);\n  }\n\n  /**\n   * Returns a Generator Function.\n   *\n   * @generator\n   * @param {string} model - contentFragment model name\n   * @param {string} fields - The query string for item fields\n   * @param {ModelConfig} [config={}] - Pagination config\n   * @param {ModelArgs} [args={}] - Query arguments\n   * @param {object} [options={}] - additional POST request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @yields {null | Promise<object | Array>} - the response items wrapped inside a Promise\n   */\n  async *runPaginatedQuery(model, fields, config = {}, args = {}, options, retryOptions) {\n    if (!model || !fields) {\n      throw new INVALID_PARAM({\n        sdkDetails: {\n          serviceURL: this.serviceURL\n        },\n        messageValues: 'Required param missing: @param {string} fields - query string for item fields'\n      });\n    }\n    let isInitial = true;\n    let hasNext = true;\n    let after = args.after || '';\n    const limit = args.limit;\n    const size = args.first || limit;\n    let pagingArgs = args;\n    while (hasNext) {\n      const offset = pagingArgs.offset || 0;\n      if (!isInitial) {\n        pagingArgs = this.__updatePagingArgs(args, {\n          offset,\n          limit,\n          after\n        });\n      }\n      isInitial = false;\n      const {\n        query,\n        type\n      } = this.buildQuery(model, fields, config, pagingArgs);\n      const {\n        data\n      } = await this.runQuery(query, options, retryOptions);\n      let filteredData = {};\n      try {\n        filteredData = this.__filterData(model, type, data, size);\n      } catch (e) {\n        throw new API_ERROR({\n          sdkDetails: {\n            serviceURL: this.serviceURL\n          },\n          messageValues: `Error while filtering response data. ${e.message}`\n        });\n      }\n      hasNext = filteredData.hasNext;\n      after = filteredData.endCursor;\n      yield filteredData.data;\n    }\n  }\n\n  /**\n   * Builds a GraphQL query string for the given parameters.\n   *\n   * @param {string} model - contentFragment Model Name\n   * @param {string} fields - The query string for item fields\n   * @param {ModelConfig} [config={}] - Pagination config\n   * @param {ModelArgs} [args={}] - Query arguments\n   * @returns {QueryBuilderResult} - object with The GraphQL query string and type\n   */\n  buildQuery(model, fields, config, args = {}) {\n    return graphQLQueryBuilder(model, fields, config, args);\n  }\n\n  /**\n   * Returns the updated paging arguments based on the current arguments and the response data.\n   *\n   * @private\n   * @param {object} args - The current paging arguments.\n   * @param {object} data - Current page arguments.\n   * @param {string} data.after - The cursor to start after.\n   * @param {number} data.offset - The offset to start from.\n   * @param {number} [data.limit = 10] - The maximum number of items to return per page.\n   * @returns {object} The updated paging arguments.\n   */\n  __updatePagingArgs(args = {}, {\n    after,\n    offset,\n    limit = 10\n  }) {\n    const queryType = getQueryType(args);\n    const pagingArgs = {\n      ...args\n    };\n    if (queryType === AEM_GRAPHQL_TYPES.LIST) {\n      pagingArgs.offset = offset + limit;\n    }\n    if (queryType === AEM_GRAPHQL_TYPES.PAGINATED) {\n      pagingArgs.after = after;\n    }\n    return pagingArgs;\n  }\n\n  /**\n   * Returns items list and paging info.\n   *\n   * @private\n   * @param {string} model - contentFragment model name\n   * @param {string} type - model query type: byPath, List, Paginated\n   * @param {object} data - raw response data\n   * @param {number} size - page size\n   * @returns {object} - object with filtered data and paging info\n   */\n  __filterData(model, type, data, size = 0) {\n    let response;\n    let filteredData;\n    let hasNext;\n    let endCursor;\n    let len;\n    switch (type) {\n      case AEM_GRAPHQL_TYPES.BY_PATH:\n        filteredData = data[`${model}${type}`].item;\n        hasNext = false;\n        break;\n      case AEM_GRAPHQL_TYPES.PAGINATED:\n        response = data[`${model}${type}`];\n        filteredData = response.edges.map(item => item.node);\n        len = filteredData && filteredData.length || 0;\n        hasNext = response.pageInfo.hasNextPage && len > 0 && len >= size;\n        endCursor = response.pageInfo.endCursor;\n        break;\n      default:\n        filteredData = data[`${model}${type}`].items;\n        len = filteredData && filteredData.length || 0;\n        hasNext = len > 0 && len >= size;\n    }\n    return {\n      data: filteredData,\n      hasNext,\n      endCursor\n    };\n  }\n\n  /**\n   * Returns an object for Request options\n   *\n   * @private\n   * @param {string} [body] - Request body (the query string)\n   * @param {object} [options] Additional Request options\n   * @returns {object} the Request options object\n   */\n  __getRequestOptions(body, options) {\n    const {\n      method = 'POST'\n    } = options;\n    const requestOptions = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    if (this.headers) {\n      requestOptions.headers = {\n        ...this.headers,\n        ...requestOptions.headers\n      };\n    }\n    if (this.auth) {\n      requestOptions.headers = {\n        ...requestOptions.headers,\n        Authorization: __getAuthHeader(this.auth)\n      };\n      requestOptions.credentials = 'include';\n    }\n    return {\n      method,\n      ...(body ? {\n        body\n      } : {}),\n      ...requestOptions,\n      ...options\n    };\n  }\n\n  /**\n   * Returns a Promise that resolves with a PUT request JSON data.\n   *\n   * @private\n   * @param {string} endpoint - Request endpoint\n   * @param {string} [body=''] - Request body (the query string)\n   * @param {object} [options={}] - Request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} the response body wrapped inside a Promise\n   */\n  async __handleRequest(endpoint, body, options, retryOptions) {\n    const requestOptions = this.__getRequestOptions(body, options);\n    const url = __getUrl(this.serviceURL, endpoint);\n    __validateUrl(url);\n    let response;\n    // 1. Handle Request\n    try {\n      response = await this.fetch(url, requestOptions, retryOptions);\n    } catch (error) {\n      // 1.1 Request error: general\n      throw new REQUEST_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: error.message\n      });\n    }\n    let apiError;\n    // 2. Handle Response error\n    if (!response.ok) {\n      try {\n        // 2.1 Check if custom error is returned\n        apiError = await response.json();\n      } catch (error) {\n        // 2.3 Response error: Couldn't parse JSON - no error defined in API response\n        throw new RESPONSE_ERROR({\n          sdkDetails: {\n            serviceURL: this.serviceURL,\n            endpoint\n          },\n          messageValues: error.message\n        });\n      }\n    }\n    if (apiError) {\n      // 2.2 Response error: JSON parsed - valid error defined in API response\n      throw new API_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: apiError\n      });\n    }\n    // 3. Handle ok response\n    let data;\n    try {\n      data = await response.json();\n    } catch (error) {\n      // 3.2. Response ok: Data error - Couldn't parse the JSON from OK response\n      throw new RESPONSE_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: error.message\n      });\n    }\n    // 3.2. Response ok: containing errors info\n    if (data && data.errors) {\n      throw new RESPONSE_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: data.errors.map(error => error.message).join('. ')\n      });\n    }\n    return data;\n  }\n}\nmodule.exports = AEMHeadless;\nmodule.exports.AEMHeadless = AEMHeadless;\nmodule.exports.ErrorCodes = ErrorCodes;","map":{"version":3,"names":["ErrorCodes","require","codes","AEM_GRAPHQL_ACTIONS","AEM_GRAPHQL_TYPES","graphQLQueryBuilder","getQueryType","__getUrl","__getPath","__getDomain","__validateUrl","__getFetch","__getAuthHeader","REQUEST_ERROR","RESPONSE_ERROR","API_ERROR","INVALID_PARAM","AEMHeadless","constructor","config","endpoint","serviceURL","auth","headers","fetch","runQuery","body","options","retryOptions","postBody","query","__handleRequest","JSON","stringify","persistQuery","path","url","persist","method","listPersistedQueries","list","runPersistedQuery","variables","toUpperCase","variablesString","encodeURIComponent","Object","keys","map","key","val","join","execute","runPaginatedQuery","model","fields","args","sdkDetails","messageValues","isInitial","hasNext","after","limit","size","first","pagingArgs","offset","__updatePagingArgs","type","buildQuery","data","filteredData","__filterData","e","message","endCursor","queryType","LIST","PAGINATED","response","len","BY_PATH","item","edges","node","length","pageInfo","hasNextPage","items","__getRequestOptions","requestOptions","Authorization","credentials","error","apiError","ok","json","errors","module","exports"],"sources":["/Users/ynaka/Downloads/summit-2024-l425-ue-z-final-with-events/react-app/node_modules/@adobe/aem-headless-client-js/src/index.js"],"sourcesContent":["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst ErrorCodes = require('./utils/SDKErrors').codes\nconst { AEM_GRAPHQL_ACTIONS, AEM_GRAPHQL_TYPES } = require('./utils/config')\nconst { graphQLQueryBuilder, getQueryType } = require('./utils/GraphQLQueryBuilder')\nconst { __getUrl, __getPath, __getDomain, __validateUrl, __getFetch, __getAuthHeader } = require('./utils/utils')\nconst { REQUEST_ERROR, RESPONSE_ERROR, API_ERROR, INVALID_PARAM } = ErrorCodes\n\n/**\n * This class provides methods to call AEM GraphQL APIs.\n * Before calling any method initialize the instance\n * with GraphQL endpoint, GraphQL serviceURL and auth if needed\n */\nclass AEMHeadless {\n  /**\n   * Constructor.\n   *\n   * If param is a string, it's treated as AEM server URL, default GraphQL endpoint is used.\n   * For granular params, use config object\n   *\n   * @param {string|object} config - Configuration object, or AEM server URL string\n   * @param {string} [config.serviceURL] - AEM server URL\n   * @param {string} [config.endpoint] - GraphQL endpoint\n   * @param {(string|Array)} [config.auth] - Bearer token string or [user,pass] pair array\n   * @param {object} [config.headers] - header { name: value, name: value, ... }\n   * @param {object} [config.fetch] - custom Fetch instance\n   */\n  constructor (config) {\n    let endpoint = AEM_GRAPHQL_ACTIONS.endpoint\n    let serviceURL = AEM_GRAPHQL_ACTIONS.serviceURL\n\n    if (typeof config === 'string') {\n      serviceURL = config\n    } else {\n      serviceURL = config.serviceURL || serviceURL\n      endpoint = config.endpoint || endpoint\n      this.auth = config.auth\n      this.headers = config.headers\n    }\n\n    this.serviceURL = __getDomain(serviceURL)\n    this.endpoint = __getPath(endpoint)\n    this.fetch = __getFetch(config.fetch)\n  }\n\n  /**\n   * Returns a Promise that resolves with a POST request JSON data.\n   *\n   * @param {string|object} body - the query string or an object with query (and optionally variables) as a property\n   * @param {object} [options={}] - additional POST request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n  async runQuery (body, options = {}, retryOptions = {}) {\n    const postBody = typeof body === 'object' ? body : { query: body }\n    return this.__handleRequest(this.endpoint, JSON.stringify(postBody), options, retryOptions)\n  }\n\n  /**\n   * Returns a Promise that resolves with a PUT request JSON data.\n   *\n   * @param {string} query - the query string\n   * @param {string} path - AEM path to save query, format: configuration_name/endpoint_name\n   * @param {object} [options={}] - additional PUT request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n  async persistQuery (query, path, options = {}, retryOptions = {}) {\n    const url = `${AEM_GRAPHQL_ACTIONS.persist}/${path}`\n    return this.__handleRequest(url, query, { method: 'PUT', ...options }, retryOptions)\n  }\n\n  /**\n   * Returns a Promise that resolves with a GET request JSON data.\n   *\n   * @param {object} [options={}] - additional GET request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n  async listPersistedQueries (options = {}, retryOptions = {}) {\n    const url = `${AEM_GRAPHQL_ACTIONS.list}`\n    return this.__handleRequest(url, '', { method: 'GET', ...options }, retryOptions)\n  }\n\n  /**\n   * Returns a Promise that resolves with a GET request JSON data.\n   *\n   * @param {string} path - AEM path for persisted query, format: configuration_name/endpoint_name\n   * @param {object} [variables={}] - query variables\n   * @param {object} [options={}] - additional GET request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n\n  async runPersistedQuery (path, variables = {}, options = {}, retryOptions = {}) {\n    const method = (options.method || 'GET').toUpperCase()\n    let body = ''\n    let variablesString = encodeURIComponent(Object.keys(variables).map(key => {\n      const val = (typeof variables[key] === 'string') ? variables[key] : JSON.stringify(variables[key])\n      return `;${key}=${val}`\n    }).join(''))\n\n    if (method === 'POST') {\n      body = JSON.stringify({ variables })\n      variablesString = ''\n    }\n\n    const url = `${AEM_GRAPHQL_ACTIONS.execute}/${path}${variablesString}`\n    return this.__handleRequest(url, body, { method, ...options }, retryOptions)\n  }\n\n  /**\n   * Returns a Generator Function.\n   *\n   * @generator\n   * @param {string} model - contentFragment model name\n   * @param {string} fields - The query string for item fields\n   * @param {ModelConfig} [config={}] - Pagination config\n   * @param {ModelArgs} [args={}] - Query arguments\n   * @param {object} [options={}] - additional POST request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @yields {null | Promise<object | Array>} - the response items wrapped inside a Promise\n   */\n  async * runPaginatedQuery (model, fields, config = {}, args = {}, options, retryOptions) {\n    if (!model || !fields) {\n      throw new INVALID_PARAM({\n        sdkDetails: {\n          serviceURL: this.serviceURL\n        },\n        messageValues: 'Required param missing: @param {string} fields - query string for item fields'\n      })\n    }\n\n    let isInitial = true\n    let hasNext = true\n    let after = args.after || ''\n    const limit = args.limit\n    const size = args.first || limit\n    let pagingArgs = args\n    while (hasNext) {\n      const offset = pagingArgs.offset || 0\n      if (!isInitial) {\n        pagingArgs = this.__updatePagingArgs(args, { offset, limit, after })\n      }\n\n      isInitial = false\n\n      const { query, type } = this.buildQuery(model, fields, config, pagingArgs)\n      const { data } = await this.runQuery(query, options, retryOptions)\n\n      let filteredData = {}\n      try {\n        filteredData = this.__filterData(model, type, data, size)\n      } catch (e) {\n        throw new API_ERROR({\n          sdkDetails: {\n            serviceURL: this.serviceURL\n          },\n          messageValues: `Error while filtering response data. ${e.message}`\n        })\n      }\n\n      hasNext = filteredData.hasNext\n      after = filteredData.endCursor\n\n      yield filteredData.data\n    }\n  }\n\n  /**\n   * Builds a GraphQL query string for the given parameters.\n   *\n   * @param {string} model - contentFragment Model Name\n   * @param {string} fields - The query string for item fields\n   * @param {ModelConfig} [config={}] - Pagination config\n   * @param {ModelArgs} [args={}] - Query arguments\n   * @returns {QueryBuilderResult} - object with The GraphQL query string and type\n   */\n  buildQuery (model, fields, config, args = {}) {\n    return graphQLQueryBuilder(model, fields, config, args)\n  }\n\n  /**\n   * Returns the updated paging arguments based on the current arguments and the response data.\n   *\n   * @private\n   * @param {object} args - The current paging arguments.\n   * @param {object} data - Current page arguments.\n   * @param {string} data.after - The cursor to start after.\n   * @param {number} data.offset - The offset to start from.\n   * @param {number} [data.limit = 10] - The maximum number of items to return per page.\n   * @returns {object} The updated paging arguments.\n   */\n  __updatePagingArgs (args = {}, { after, offset, limit = 10 }) {\n    const queryType = getQueryType(args)\n    const pagingArgs = { ...args }\n    if (queryType === AEM_GRAPHQL_TYPES.LIST) {\n      pagingArgs.offset = offset + limit\n    }\n\n    if (queryType === AEM_GRAPHQL_TYPES.PAGINATED) {\n      pagingArgs.after = after\n    }\n\n    return pagingArgs\n  }\n\n  /**\n   * Returns items list and paging info.\n   *\n   * @private\n   * @param {string} model - contentFragment model name\n   * @param {string} type - model query type: byPath, List, Paginated\n   * @param {object} data - raw response data\n   * @param {number} size - page size\n   * @returns {object} - object with filtered data and paging info\n   */\n  __filterData (model, type, data, size = 0) {\n    let response\n    let filteredData\n    let hasNext\n    let endCursor\n    let len\n    switch (type) {\n      case AEM_GRAPHQL_TYPES.BY_PATH:\n        filteredData = data[`${model}${type}`].item\n        hasNext = false\n        break\n      case AEM_GRAPHQL_TYPES.PAGINATED:\n        response = data[`${model}${type}`]\n        filteredData = response.edges.map(item => item.node)\n        len = (filteredData && filteredData.length) || 0\n        hasNext = response.pageInfo.hasNextPage && len > 0 && len >= size\n        endCursor = response.pageInfo.endCursor\n        break\n      default:\n        filteredData = data[`${model}${type}`].items\n        len = (filteredData && filteredData.length) || 0\n        hasNext = len > 0 && len >= size\n    }\n\n    return {\n      data: filteredData,\n      hasNext,\n      endCursor\n    }\n  }\n\n  /**\n   * Returns an object for Request options\n   *\n   * @private\n   * @param {string} [body] - Request body (the query string)\n   * @param {object} [options] Additional Request options\n   * @returns {object} the Request options object\n   */\n  __getRequestOptions (body, options) {\n    const { method = 'POST' } = options\n\n    const requestOptions = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    if (this.headers) {\n      requestOptions.headers = {\n        ...this.headers,\n        ...requestOptions.headers\n      }\n    }\n\n    if (this.auth) {\n      requestOptions.headers = {\n        ...requestOptions.headers,\n        Authorization: __getAuthHeader(this.auth)\n      }\n      requestOptions.credentials = 'include'\n    }\n\n    return {\n      method,\n      ...body ? { body } : {},\n      ...requestOptions,\n      ...options\n    }\n  }\n\n  /**\n   * Returns a Promise that resolves with a PUT request JSON data.\n   *\n   * @private\n   * @param {string} endpoint - Request endpoint\n   * @param {string} [body=''] - Request body (the query string)\n   * @param {object} [options={}] - Request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} the response body wrapped inside a Promise\n   */\n  async __handleRequest (endpoint, body, options, retryOptions) {\n    const requestOptions = this.__getRequestOptions(body, options)\n    const url = __getUrl(this.serviceURL, endpoint)\n    __validateUrl(url)\n\n    let response\n    // 1. Handle Request\n    try {\n      response = await this.fetch(url, requestOptions, retryOptions)\n    } catch (error) {\n      // 1.1 Request error: general\n      throw new REQUEST_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: error.message\n      })\n    }\n    let apiError\n    // 2. Handle Response error\n    if (!response.ok) {\n      try {\n        // 2.1 Check if custom error is returned\n        apiError = await response.json()\n      } catch (error) {\n        // 2.3 Response error: Couldn't parse JSON - no error defined in API response\n        throw new RESPONSE_ERROR({\n          sdkDetails: {\n            serviceURL: this.serviceURL,\n            endpoint\n          },\n          messageValues: error.message\n        })\n      }\n    }\n\n    if (apiError) {\n      // 2.2 Response error: JSON parsed - valid error defined in API response\n      throw new API_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: apiError\n      })\n    }\n    // 3. Handle ok response\n    let data\n    try {\n      data = await response.json()\n    } catch (error) {\n      // 3.2. Response ok: Data error - Couldn't parse the JSON from OK response\n      throw new RESPONSE_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: error.message\n      })\n    }\n    // 3.2. Response ok: containing errors info\n    if (data && data.errors) {\n      throw new RESPONSE_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: data.errors.map((error) => error.message).join('. ')\n      })\n    }\n\n    return data\n  }\n}\n\nmodule.exports = AEMHeadless\nmodule.exports.AEMHeadless = AEMHeadless\nmodule.exports.ErrorCodes = ErrorCodes\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}