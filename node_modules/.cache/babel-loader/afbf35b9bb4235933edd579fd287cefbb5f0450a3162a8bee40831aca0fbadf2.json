{"ast":null,"code":"require('../types'); // eslint-disable-line\nconst {\n  AEM_GRAPHQL_TYPES\n} = require('./config');\n\n/**\n *\n * @private\n * @param {object} obj - object representing query arguments\n * @returns {string} - query args as a string\n */\nfunction objToStringArgs(obj) {\n  const str = JSON.stringify(obj).replace(/\"([^\"]+)\":/g, '$1:');\n  return str.substring(1, str.length - 1);\n}\n\n/**\n * Returns a Query for model by path\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelByPathArgs} args - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelByPath = (model, fields, args) => {\n  if (!args || !args._path) {\n    throw new Error('Missing required param \"_path\"');\n  }\n  const type = AEM_GRAPHQL_TYPES.BY_PATH;\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      item ${fields}\n    }\n  }`;\n  return {\n    type,\n    query\n  };\n};\n\n/**\n * Returns a Query for model list\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelListArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelList = (model, fields, args = {}) => {\n  const type = AEM_GRAPHQL_TYPES.LIST;\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      items ${fields}\n    }\n  }`;\n  return {\n    type,\n    query\n  };\n};\n\n/**\n * Returns a Query for model list\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelPaginatedArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelPaginated = (model, fields, args = {}) => {\n  const type = AEM_GRAPHQL_TYPES.PAGINATED;\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node ${fields}\n        cursor\n      }\n    }\n  }`;\n  return {\n    type,\n    query\n  };\n};\nconst getQueryType = (args = {}) => {\n  if (args._path) {\n    return AEM_GRAPHQL_TYPES.BY_PATH;\n  }\n  if (args.useLimitOffset) {\n    return AEM_GRAPHQL_TYPES.LIST;\n  }\n  return AEM_GRAPHQL_TYPES.PAGINATED;\n};\n\n/**\n * Builds a GraphQL query string for the given parameters.\n *\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields\n * @param {ModelConfig} [config={}] - Pagination config\n * @param {ModelArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult} - object with The GraphQL query string and type\n */\nconst graphQLQueryBuilder = (model, fields, config = {}, args = {}) => {\n  if (args._path) {\n    return __modelByPath(model, fields, args);\n  }\n  if (config.useLimitOffset) {\n    args.limit = args.limit || config.pageSize || 10;\n    if (config.after) {\n      args.offset = args.offset || config.after;\n    }\n    return __modelList(model, fields, args);\n  }\n  if (config.pageSize) {\n    args.first = args.first || config.pageSize;\n  }\n  if (config.after) {\n    args.after = args.after || config.after;\n  }\n  return __modelPaginated(model, fields, args);\n};\nmodule.exports = {\n  graphQLQueryBuilder,\n  getQueryType\n};","map":{"version":3,"names":["require","AEM_GRAPHQL_TYPES","objToStringArgs","obj","str","JSON","stringify","replace","substring","length","__modelByPath","model","fields","args","_path","Error","type","BY_PATH","query","__modelList","LIST","__modelPaginated","PAGINATED","getQueryType","useLimitOffset","graphQLQueryBuilder","config","limit","pageSize","after","offset","first","module","exports"],"sources":["/Users/ynaka/Downloads/summit-2024-l425-ue-z-final-with-events/react-app/node_modules/@adobe/aem-headless-client-js/src/utils/GraphQLQueryBuilder.js"],"sourcesContent":["require('../types') // eslint-disable-line\nconst { AEM_GRAPHQL_TYPES } = require('./config')\n\n/**\n *\n * @private\n * @param {object} obj - object representing query arguments\n * @returns {string} - query args as a string\n */\nfunction objToStringArgs (obj) {\n  const str = JSON.stringify(obj).replace(/\"([^\"]+)\":/g, '$1:')\n  return str.substring(1, str.length - 1)\n}\n\n/**\n * Returns a Query for model by path\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelByPathArgs} args - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelByPath = (model, fields, args) => {\n  if (!args || !args._path) {\n    throw new Error('Missing required param \"_path\"')\n  }\n  const type = AEM_GRAPHQL_TYPES.BY_PATH\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      item ${fields}\n    }\n  }`\n\n  return {\n    type,\n    query\n  }\n}\n\n/**\n * Returns a Query for model list\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelListArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelList = (model, fields, args = {}) => {\n  const type = AEM_GRAPHQL_TYPES.LIST\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      items ${fields}\n    }\n  }`\n\n  return {\n    type,\n    query\n  }\n}\n\n/**\n * Returns a Query for model list\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelPaginatedArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelPaginated = (model, fields, args = {}) => {\n  const type = AEM_GRAPHQL_TYPES.PAGINATED\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node ${fields}\n        cursor\n      }\n    }\n  }`\n\n  return {\n    type,\n    query\n  }\n}\n\nconst getQueryType = (args = {}) => {\n  if (args._path) {\n    return AEM_GRAPHQL_TYPES.BY_PATH\n  }\n\n  if (args.useLimitOffset) {\n    return AEM_GRAPHQL_TYPES.LIST\n  }\n\n  return AEM_GRAPHQL_TYPES.PAGINATED\n}\n\n/**\n * Builds a GraphQL query string for the given parameters.\n *\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields\n * @param {ModelConfig} [config={}] - Pagination config\n * @param {ModelArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult} - object with The GraphQL query string and type\n */\nconst graphQLQueryBuilder = (model, fields, config = {}, args = {}) => {\n  if (args._path) {\n    return __modelByPath(model, fields, args)\n  }\n\n  if (config.useLimitOffset) {\n    args.limit = args.limit || config.pageSize || 10\n    if (config.after) {\n      args.offset = args.offset || config.after\n    }\n    return __modelList(model, fields, args)\n  }\n\n  if (config.pageSize) {\n    args.first = args.first || config.pageSize\n  }\n\n  if (config.after) {\n    args.after = args.after || config.after\n  }\n\n  return __modelPaginated(model, fields, args)\n}\n\nmodule.exports = {\n  graphQLQueryBuilder,\n  getQueryType\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}